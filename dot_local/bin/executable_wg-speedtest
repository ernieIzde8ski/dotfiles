#!/usr/bin/env python3

import argparse
import getpass
import subprocess
from pathlib import Path

if getpass.getuser() != "root":
    raise RuntimeError("program must be run as root!")

parser = argparse.ArgumentParser(description="Tests matched configurations in /etc/wireguard for configuration with highest speed.")
parser.add_argument("glob", type=str, help="files to match")
parser.add_argument("--hostname", type=str, default="9.9.9.9", help="host to ping")
parser.add_argument("--pings", type=int, default=5, help="times --hostname is pinged")
parser.add_argument("--debug", type=bool, default=False, help="display executed commands")
clargs  = parser.parse_args()

class SubprocessError(RuntimeError):
    code: int
    stderr: str
    def __init__(self, code: int, stderr: str, *args: object) -> None:
        super().__init__(f"Process failed with exit code {code}", *args)
        self.code = code
        self.stderr = stderr

def run(*args: str, encoding="utf-8") -> str:
    if clargs.debug:
        print("#", *args)
    proc = subprocess.run(args, capture_output=True)
    if proc.returncode == 0:
        return proc.stdout.decode(encoding).strip()
    text = proc.stderr.decode(encoding).strip()
    raise SubprocessError(proc.returncode, text)

def ping(count = str(clargs.pings), host = clargs.hostname):
    try:
        output = run("ping", "-c", count, host)
        # on my computer, the trailing output is min/avg/max/mdev
        # we want to return the average
        nums = output.split()[-2].split("/")
        return float(nums[1])
    except:
        return -1.0

rates: list[tuple[str, float]] = []

try:
    paths = Path("/etc/wireguard/").glob(clargs.glob)
    for i, path in enumerate(paths, start=1):
        fp = path.name.removesuffix(".conf")
        print(f"handling config: (#{i})", fp, f"")
        run("wg-quick", "up", fp)
        try:
            time = ping()
            if time != -1.0:
                print("\tinterface average time:", time, "ms")
                rates.append((fp, time))
            else:
                print("\tinterface failed :(")
        finally:
            run("wg-quick", "down", fp)
except KeyboardInterrupt:
    print("goodbye!")
finally:
    if not rates:
        print("Couldn't connect to any interfaces :(")
    else:
        print()
        key = lambda rate: rate[1]
        lowest_rate = min(rates, key=key)
        rates.sort(key=key)
        print("All rates:\n", *rates, sep="\t")
        print("Lowest rate:\t", lowest_rate[0], "with an average of", lowest_rate[1], "ms")
