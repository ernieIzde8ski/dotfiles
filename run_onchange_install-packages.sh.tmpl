{{ $isRoot := eq .chezmoi.uid "0" -}}
{{ $isVoid := eq .chezmoi.osRelease.id "void" -}}

#!/bin/bash

{{ if or (not $isRoot) (not $isVoid) -}}

exit 0

{{- else -}}

set -e

##########################################################################################

misc_pkgs=(chezmoi fd git neofetch python3 python3-pip python3-virtualenv void-docs xmirror xtools zsh)
evil_pkgs=(NetworkManager chrony opendoas)
to_unlink=(dhcpcd ntpd sddm wpa_supplicant)
to_link=(NetworkManager chronyd)

{{ if .isXServer -}}

misc_pkgs+=(ffmpegthumbs kde5 kde5-baseapps kdegraphics-thumbnailers pipewire vivaldi wireplumber xorg-minimal)
evil_pkgs+=(greetd)
to_link+=(greetd)

{{ end -}}

generate_file() {
    if [ ! -f "$1" ]; then
        echo "generating '$1'..."
        echo $2 >> "$1"
    fi
}


CAT_IGNOREFILE=$( cat <<- BLOCK
ignorepkg=sudo
# doesnt work until linux-lts is up to date for my laptop
#xbps-remove linux linux-headers
#ignorepkg=linux
#ignorepkg=linux-headers
ignorepkg=sddm
ignorepkg=sddm-kcm
ignorepkg=kate5
BLOCK
)

CAT_DOAS_CONF=$( cat <<- BLOCK
permit persist setenv { EDITOR LANG LC_ALL SHLVL XAUTHORITY } :wheel
permit nopass :root
BLOCK
)

CAT_GREETD_CONF=$( cat <<- BLOCK
# File automatically generated by installation script
[terminal]
vt = 7

[default_session]
command = "agreety --cmd startx"
user = "_greeter"

BLOCK
)

##########################################################################################

xbps-install -Su
xbps-install -y ripgrep void-repo-nonfree


if [ ! -f /etc/xbps.d/00-repository-main.conf ] \
|| rg 'repo-default' /etc/xbps.d/ &>/dev/null; then
    xbps-install xmirror
    xmirror
fi

generate_file '/etc/xbps.d/ignorepkg.conf' "$CAT_IGNOREFILE"

xbps-install -y ${misc_pkgs[*]}
chsh -s /bin/zsh


{{ if .isXServer }}
    mkdir -p /etc/greetd/
    generate_file /etc/greetd/config.toml "$CAT_GREETD_CONF"
{{ end }}

xbps-install -y ${evil_pkgs[*]}
xbps-remove sudo 2>/dev/null || :

echo "setting up symbolic links..."

for sv in ${to_unlink[@]}; do
    path="/var/service/$sv"
    if [ -L "$path" ]; then
        unlink "$path"
        echo "unlinked $path"
    fi
done

for sv in ${to_link[@]}; do
    source="/etc/sv/$sv"
    target="/var/service/$sv"
    if [ -e "$source" ] && [ ! -e "$target" ]; then
        ln -s "$source" "$target"
        echo "linked $target !"
    fi
done

{{ end -}}
